Inspecting a DataFrame

When you get a new DataFrame to work with, the first thing you need to do is explore it and see what it contains. There are several useful methods and attributes for this.

    .head() returns the first few rows (the “head” of the DataFrame).
    .info() shows information on each of the columns, such as the data type and number of missing values.
    .shape returns the number of rows and columns of the DataFrame.
    .describe() calculates a few summary statistics for each column.

To better understand DataFrame objects, it's useful to know that they consist of three components, stored as attributes:

    .values: A two-dimensional NumPy array of values.
    .columns: An index of columns: the column names.
    .index: An index for the rows: either row numbers or row names.

You can usually think of indexes as a list of strings or numbers, though the pandas Index data type allows for more sophisticated options. (These will be covered later in the course.)

Sorting rows

Finding interesting bits of data in a DataFrame is often easier if you change the order of the rows. You can sort the rows by passing a column name to .sort_values().

In cases where rows have the same value (this is common if you sort on a categorical variable), you may wish to break the ties by sorting on another column. You can sort on multiple columns in this way by passing a list of column names.
Sort on … 	Syntax
one column 	df.sort_values("breed")
multiple columns 	df.sort_values(["breed", "weight_kg"])

By combining .sort_values() with .head(), you can answer questions in the form, "What are the top cases where…?".

#Sorting in descending 
orderdogs.sort_values("weight_kg", ascending=False)

#Sorting by multiple variables 
dogs.sort_values(["weight_kg", "height_cm"])

#Sorting by multiple variables
dogs.sort_values(["weight_kg", "height_cm"], ascending=[True, False])

#Subsetting columnsdogs["name"]

#Subsetting multiple columns
dogs[["breed", "height_cm"]]
;
cols_to_subset = ["breed", "height_cm"]
dogs[cols_to_subset]
#Subsetting rows
dogs["height_cm"] > 50
#Subsetting rows
dogs[dogs["height_cm"] > 50]
#Subsetting based on text data
dogs[dogs["breed"] == "Labrador"]
#Subsetting based on dates
dogs[dogs["date_of_birth"] < "2015-01-01"]
#Subsetting based on multiple
conditionsis_lab = dogs["breed"] == "Labrador"is_brown = dogs["color"] == "Brown"dogs[is_lab & is_brown]
#Subsetting using .isin()
is_black_or_brown = dogs["color"].isin(["Black", "Brown"])dogs[is_black_or_brown]
## Subsetting based on multiple 
conditionsis_lab = dogs["breed"] == "Labrador"
is_brown = dogs["color"] == "Brown"
dogs[is_lab & is_brown]
dogs[ (dogs["breed"] == "Labrador") & (dogs["color"] == "Brown") ]
